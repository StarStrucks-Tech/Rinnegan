// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: ui.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UiService_GetUiResponse_FullMethodName = "/uiproject.proto.UiService/GetUiResponse"
)

// UiServiceClient is the client API for UiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UiServiceClient interface {
	GetUiResponse(ctx context.Context, in *UiRequest, opts ...grpc.CallOption) (*UiResponse, error)
}

type uiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUiServiceClient(cc grpc.ClientConnInterface) UiServiceClient {
	return &uiServiceClient{cc}
}

func (c *uiServiceClient) GetUiResponse(ctx context.Context, in *UiRequest, opts ...grpc.CallOption) (*UiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UiResponse)
	err := c.cc.Invoke(ctx, UiService_GetUiResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UiServiceServer is the server API for UiService service.
// All implementations must embed UnimplementedUiServiceServer
// for forward compatibility
type UiServiceServer interface {
	GetUiResponse(context.Context, *UiRequest) (*UiResponse, error)
	mustEmbedUnimplementedUiServiceServer()
}

// UnimplementedUiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUiServiceServer struct {
}

func (UnimplementedUiServiceServer) GetUiResponse(context.Context, *UiRequest) (*UiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUiResponse not implemented")
}
func (UnimplementedUiServiceServer) mustEmbedUnimplementedUiServiceServer() {}

// UnsafeUiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UiServiceServer will
// result in compilation errors.
type UnsafeUiServiceServer interface {
	mustEmbedUnimplementedUiServiceServer()
}

func RegisterUiServiceServer(s grpc.ServiceRegistrar, srv UiServiceServer) {
	s.RegisterService(&UiService_ServiceDesc, srv)
}

func _UiService_GetUiResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UiServiceServer).GetUiResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UiService_GetUiResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UiServiceServer).GetUiResponse(ctx, req.(*UiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UiService_ServiceDesc is the grpc.ServiceDesc for UiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uiproject.proto.UiService",
	HandlerType: (*UiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUiResponse",
			Handler:    _UiService_GetUiResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ui.proto",
}
