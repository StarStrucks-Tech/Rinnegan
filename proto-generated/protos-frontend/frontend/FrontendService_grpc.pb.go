// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: protos-frontend/frontend/FrontendService.proto

// Define the package name

package frontend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FrontendService_GetPhoneVerificationScreen_FullMethodName = "/frontend.FrontendService/GetPhoneVerificationScreen"
	FrontendService_TriggerPhoneVerification_FullMethodName   = "/frontend.FrontendService/TriggerPhoneVerification"
	FrontendService_GetEmailVerificationScreen_FullMethodName = "/frontend.FrontendService/GetEmailVerificationScreen"
	FrontendService_TriggerEmailVerification_FullMethodName   = "/frontend.FrontendService/TriggerEmailVerification"
)

// FrontendServiceClient is the client API for FrontendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the service
type FrontendServiceClient interface {
	// RPC to get the phone verification
	GetPhoneVerificationScreen(ctx context.Context, in *GetPhoneVerificationScreenRequest, opts ...grpc.CallOption) (*GetPhoneVerificationScreenResponse, error)
	TriggerPhoneVerification(ctx context.Context, in *TriggerPhoneVerificationRequest, opts ...grpc.CallOption) (*TriggerPhoneVerificationResponse, error)
	GetEmailVerificationScreen(ctx context.Context, in *GetEmailVerificationScreenRequest, opts ...grpc.CallOption) (*GetEmailVerificationScreenResponse, error)
	TriggerEmailVerification(ctx context.Context, in *TriggerEmailVerificationRequest, opts ...grpc.CallOption) (*TriggerEmailVerificationResponse, error)
}

type frontendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontendServiceClient(cc grpc.ClientConnInterface) FrontendServiceClient {
	return &frontendServiceClient{cc}
}

func (c *frontendServiceClient) GetPhoneVerificationScreen(ctx context.Context, in *GetPhoneVerificationScreenRequest, opts ...grpc.CallOption) (*GetPhoneVerificationScreenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPhoneVerificationScreenResponse)
	err := c.cc.Invoke(ctx, FrontendService_GetPhoneVerificationScreen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) TriggerPhoneVerification(ctx context.Context, in *TriggerPhoneVerificationRequest, opts ...grpc.CallOption) (*TriggerPhoneVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerPhoneVerificationResponse)
	err := c.cc.Invoke(ctx, FrontendService_TriggerPhoneVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) GetEmailVerificationScreen(ctx context.Context, in *GetEmailVerificationScreenRequest, opts ...grpc.CallOption) (*GetEmailVerificationScreenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailVerificationScreenResponse)
	err := c.cc.Invoke(ctx, FrontendService_GetEmailVerificationScreen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendServiceClient) TriggerEmailVerification(ctx context.Context, in *TriggerEmailVerificationRequest, opts ...grpc.CallOption) (*TriggerEmailVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerEmailVerificationResponse)
	err := c.cc.Invoke(ctx, FrontendService_TriggerEmailVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendServiceServer is the server API for FrontendService service.
// All implementations must embed UnimplementedFrontendServiceServer
// for forward compatibility
//
// Define the service
type FrontendServiceServer interface {
	// RPC to get the phone verification
	GetPhoneVerificationScreen(context.Context, *GetPhoneVerificationScreenRequest) (*GetPhoneVerificationScreenResponse, error)
	TriggerPhoneVerification(context.Context, *TriggerPhoneVerificationRequest) (*TriggerPhoneVerificationResponse, error)
	GetEmailVerificationScreen(context.Context, *GetEmailVerificationScreenRequest) (*GetEmailVerificationScreenResponse, error)
	TriggerEmailVerification(context.Context, *TriggerEmailVerificationRequest) (*TriggerEmailVerificationResponse, error)
	mustEmbedUnimplementedFrontendServiceServer()
}

// UnimplementedFrontendServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFrontendServiceServer struct {
}

func (UnimplementedFrontendServiceServer) GetPhoneVerificationScreen(context.Context, *GetPhoneVerificationScreenRequest) (*GetPhoneVerificationScreenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhoneVerificationScreen not implemented")
}
func (UnimplementedFrontendServiceServer) TriggerPhoneVerification(context.Context, *TriggerPhoneVerificationRequest) (*TriggerPhoneVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerPhoneVerification not implemented")
}
func (UnimplementedFrontendServiceServer) GetEmailVerificationScreen(context.Context, *GetEmailVerificationScreenRequest) (*GetEmailVerificationScreenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailVerificationScreen not implemented")
}
func (UnimplementedFrontendServiceServer) TriggerEmailVerification(context.Context, *TriggerEmailVerificationRequest) (*TriggerEmailVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerEmailVerification not implemented")
}
func (UnimplementedFrontendServiceServer) mustEmbedUnimplementedFrontendServiceServer() {}

// UnsafeFrontendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontendServiceServer will
// result in compilation errors.
type UnsafeFrontendServiceServer interface {
	mustEmbedUnimplementedFrontendServiceServer()
}

func RegisterFrontendServiceServer(s grpc.ServiceRegistrar, srv FrontendServiceServer) {
	s.RegisterService(&FrontendService_ServiceDesc, srv)
}

func _FrontendService_GetPhoneVerificationScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhoneVerificationScreenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).GetPhoneVerificationScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_GetPhoneVerificationScreen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).GetPhoneVerificationScreen(ctx, req.(*GetPhoneVerificationScreenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_TriggerPhoneVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerPhoneVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).TriggerPhoneVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_TriggerPhoneVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).TriggerPhoneVerification(ctx, req.(*TriggerPhoneVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_GetEmailVerificationScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailVerificationScreenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).GetEmailVerificationScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_GetEmailVerificationScreen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).GetEmailVerificationScreen(ctx, req.(*GetEmailVerificationScreenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendService_TriggerEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerEmailVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServiceServer).TriggerEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontendService_TriggerEmailVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServiceServer).TriggerEmailVerification(ctx, req.(*TriggerEmailVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FrontendService_ServiceDesc is the grpc.ServiceDesc for FrontendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrontendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "frontend.FrontendService",
	HandlerType: (*FrontendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPhoneVerificationScreen",
			Handler:    _FrontendService_GetPhoneVerificationScreen_Handler,
		},
		{
			MethodName: "TriggerPhoneVerification",
			Handler:    _FrontendService_TriggerPhoneVerification_Handler,
		},
		{
			MethodName: "GetEmailVerificationScreen",
			Handler:    _FrontendService_GetEmailVerificationScreen_Handler,
		},
		{
			MethodName: "TriggerEmailVerification",
			Handler:    _FrontendService_TriggerEmailVerification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos-frontend/frontend/FrontendService.proto",
}
