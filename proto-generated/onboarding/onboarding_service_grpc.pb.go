// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: onboarding/onboarding_service.proto

package onboarding

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	OnboardingService_SendVerificationCode_FullMethodName = "/onboarding.OnboardingService/SendVerificationCode"
	OnboardingService_VerifyCode_FullMethodName           = "/onboarding.OnboardingService/VerifyCode"
)

// OnboardingServiceClient is the client API for OnboardingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The onboarding service definition.
type OnboardingServiceClient interface {
	// Sends a verification code to the user's email.
	SendVerificationCode(ctx context.Context, in *EmailVerificationRequest, opts ...grpc.CallOption) (*EmailVerificationResponse, error)
	// Verifies the code sent to the user's email.
	VerifyCode(ctx context.Context, in *VerifyCodeRequest, opts ...grpc.CallOption) (*VerifyCodeResponse, error)
}

type onboardingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnboardingServiceClient(cc grpc.ClientConnInterface) OnboardingServiceClient {
	return &onboardingServiceClient{cc}
}

func (c *onboardingServiceClient) SendVerificationCode(ctx context.Context, in *EmailVerificationRequest, opts ...grpc.CallOption) (*EmailVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmailVerificationResponse)
	err := c.cc.Invoke(ctx, OnboardingService_SendVerificationCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onboardingServiceClient) VerifyCode(ctx context.Context, in *VerifyCodeRequest, opts ...grpc.CallOption) (*VerifyCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyCodeResponse)
	err := c.cc.Invoke(ctx, OnboardingService_VerifyCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnboardingServiceServer is the server API for OnboardingService service.
// All implementations must embed UnimplementedOnboardingServiceServer
// for forward compatibility
//
// The onboarding service definition.
type OnboardingServiceServer interface {
	// Sends a verification code to the user's email.
	SendVerificationCode(context.Context, *EmailVerificationRequest) (*EmailVerificationResponse, error)
	// Verifies the code sent to the user's email.
	VerifyCode(context.Context, *VerifyCodeRequest) (*VerifyCodeResponse, error)
	mustEmbedUnimplementedOnboardingServiceServer()
}

// UnimplementedOnboardingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOnboardingServiceServer struct {
}

func (UnimplementedOnboardingServiceServer) SendVerificationCode(context.Context, *EmailVerificationRequest) (*EmailVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerificationCode not implemented")
}
func (UnimplementedOnboardingServiceServer) VerifyCode(context.Context, *VerifyCodeRequest) (*VerifyCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCode not implemented")
}
func (UnimplementedOnboardingServiceServer) mustEmbedUnimplementedOnboardingServiceServer() {}

// UnsafeOnboardingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnboardingServiceServer will
// result in compilation errors.
type UnsafeOnboardingServiceServer interface {
	mustEmbedUnimplementedOnboardingServiceServer()
}

func RegisterOnboardingServiceServer(s grpc.ServiceRegistrar, srv OnboardingServiceServer) {
	s.RegisterService(&OnboardingService_ServiceDesc, srv)
}

func _OnboardingService_SendVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnboardingServiceServer).SendVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnboardingService_SendVerificationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnboardingServiceServer).SendVerificationCode(ctx, req.(*EmailVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnboardingService_VerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnboardingServiceServer).VerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnboardingService_VerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnboardingServiceServer).VerifyCode(ctx, req.(*VerifyCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OnboardingService_ServiceDesc is the grpc.ServiceDesc for OnboardingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnboardingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "onboarding.OnboardingService",
	HandlerType: (*OnboardingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendVerificationCode",
			Handler:    _OnboardingService_SendVerificationCode_Handler,
		},
		{
			MethodName: "VerifyCode",
			Handler:    _OnboardingService_VerifyCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onboarding/onboarding_service.proto",
}
